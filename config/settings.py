"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.6.
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import dj_database_url
import logging

# ---------------------------------------------------------------------
# BASE CONFIG
# ---------------------------------------------------------------------
BASE_DIR = Path(__file__).resolve().parent.parent

# Load .env from either base or bodrless-be subfolder
dotenv_path = os.path.join(BASE_DIR, '.env')
if not os.path.exists(dotenv_path):
    dotenv_path = os.path.join(BASE_DIR, 'bodrless-be', '.env')
load_dotenv(dotenv_path=dotenv_path)

# ---------------------------------------------------------------------
# SECURITY
# ---------------------------------------------------------------------
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-ju(r-3j^0=02x(+v+trrqf@p8ziw^b1ujpj9#e+8(x&l1-3rzd')
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = [
    'bodrless-main-be.onrender.com',
    'localhost',
    '127.0.0.1',
]

# ---------------------------------------------------------------------
# APPLICATIONS
# ---------------------------------------------------------------------
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# ---------------------------------------------------------------------
# DATABASE CONFIG
# ---------------------------------------------------------------------
logger = logging.getLogger(__name__)
DATABASE_URL = os.getenv('DATABASE_URL')

if DATABASE_URL and len(DATABASE_URL) > 0:
    try:
        DATABASES = {
            'default': dj_database_url.parse(DATABASE_URL)
        }
        logger.info("Using DATABASE_URL for database configuration")
    except Exception as e:
        logger.error(f"Error parsing DATABASE_URL: {e}")
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': os.getenv('DB_NAME', 'bodrless_db'),
                'USER': os.getenv('DB_USER', 'postgres'),
                'PASSWORD': os.getenv('DB_PASSWORD', 'Catchmeifyoucan'),
                'HOST': os.getenv('DB_HOST', '127.0.0.1'),
                'PORT': os.getenv('DB_PORT', '5432'),
            }
        }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DB_NAME', 'bodrless_db'),
            'USER': os.getenv('DB_USER', 'postgres'),
            'PASSWORD': os.getenv('DB_PASSWORD', 'Catchmeifyoucan'),
            'HOST': os.getenv('DB_HOST', '127.0.0.1'),
            'PORT': os.getenv('DB_PORT', '5432'),
        }
    }

# ---------------------------------------------------------------------
# PASSWORD VALIDATORS
# ---------------------------------------------------------------------
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# ---------------------------------------------------------------------
# INTERNATIONALIZATION
# ---------------------------------------------------------------------
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# ---------------------------------------------------------------------
# STATIC FILES
# ---------------------------------------------------------------------
STATIC_URL = 'static/'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ---------------------------------------------------------------------
# CORS & CSRF CONFIGURATION
# ---------------------------------------------------------------------
CORS_ALLOWED_ORIGINS = [
    "https://bodrless.netlify.app",
    "https://bodrless-main-be.onrender.com",
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = False

CSRF_TRUSTED_ORIGINS = [
    "https://bodrless.netlify.app",
    "https://bodrless-main-be.onrender.com",
]

CORS_ALLOW_HEADERS = [
    'accept', 'accept-encoding', 'authorization', 'content-type', 'dnt',
    'origin', 'user-agent', 'x-csrftoken', 'x-requested-with', 'x-forwarded-proto',
    'cache-control', 'pragma', 'expires',
]

CORS_ALLOW_METHODS = [
    'DELETE', 'GET', 'OPTIONS', 'PATCH', 'POST', 'PUT',
]

CORS_EXPOSE_HEADERS = ['content-type', 'authorization', 'x-request-id']
CORS_PREFLIGHT_MAX_AGE = 86400  # 24h cache

# ---------------------------------------------------------------------
# REST FRAMEWORK SETTINGS
# ---------------------------------------------------------------------
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_PAGINATION_CLASS': None,
}

# ---------------------------------------------------------------------
# THIRD-PARTY SERVICE KEYS
# ---------------------------------------------------------------------
MISTRAL_API_KEY = os.getenv('MISTRAL_API_KEY')
TRAVELDUQA_API_KEY = os.getenv('TRAVELDUQA_API_KEY')
INTASEND_API_KEY = os.getenv('INTASEND_API_KEY')
INTASEND_PUBLISHABLE_KEY = os.getenv('INTASEND_PUBLISHABLE_KEY')
INTASEND_TEST_MODE = os.getenv('INTASEND_TEST_MODE', 'True').lower() == 'true'
INTASEND_ENABLED = os.getenv('INTASEND_ENABLED', 'False').lower() == 'true'

if not INTASEND_API_KEY or not INTASEND_PUBLISHABLE_KEY:
    INTASEND_ENABLED = False

# ---------------------------------------------------------------------
# EMAIL CONFIG IMPORT
# ---------------------------------------------------------------------
try:
    from .email_settings import *
except ImportError:
    pass

# ---------------------------------------------------------------------
# HEALTH CHECK (OPTIONAL)
# ---------------------------------------------------------------------
def health_check():
    return {
        'status': 'healthy',
        'service': 'Bodrless Django API',
        'version': '1.0.0',
        'database_configured': DATABASE_URL is not None,
        'debug_mode': DEBUG,
    }
